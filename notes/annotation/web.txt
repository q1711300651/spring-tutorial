@Controller

Аннотация показывает, что класс может выполнять роль котроллера
Контроллеры предостовляют доступ к приложению через веб интерфейс. Для обноружение таких классов, нужно добавить
директиву, в контекст:
    <context:component-scan base-package="org.springframework.samples.petclinic.web"/>


Если добавить транзакцию к контроллеру, посредством @Transactional, то нужно учитывать, что контроллер который реализует
не Spring интерфейсы обратного вызова, должен изменить <tx:annotation-driven />, на
<tx:annotation-driven proxy-target-class="true" />.

@RequestMapping
Аннотация используеться для связываение URL запроса с соответсующим методом контроллера, так же позволяет фильтровать
запросы, по методу, типу, контексту, параметрам, хедерам т.д
Более детально смотри \spring-web\src\main\java\my.spring.controller.RequestMapperSamples


@RequestParam
value = имя параметра
required - обязательный
defaultValue = значение по умолчанию

Указыват на параметр запроса


@RequestBody/@ResponseBody
    Аннотация связывает с списком HttpMessageConverter, которые отвественные за преобразования HTTP зпроса в
    обьект и обратно, RequestMappingHandlerAdapter поддерживает аннотацию со следующими коневрторами по умолчанию:

    • ByteArrayHttpMessageConverter конвертирует в массив байтов.
    • StringHttpMessageConverter в строку.
    • FormHttpMessageConverter конвертирует данные формы в/с  MultiValueMap<String, String>.
    • SourceHttpMessageConverter ковертирует в/с a javax.xml.transform.Source.
Для примера настройки смотри \spring-web\src\main\resources\web-config.xml


@ModelAttribute
    Аннотация используеться на методах или аргументов методов.

    При использовании в методах, заставляет вызывать подоюный метод, перед обработчиком запроса
    (методом  @RequestMapping) того же контроллера и помещеет в модель возвращаемый параметр, к примеру следующий метод,
    помещает в модель

        @ModelAttribute
        public Account addAccount(@RequestParam String number) {
            return accountManager.findAccount(number);
        }

    При использовании в аргументе, фиксирует что аргумент должен быть взят из модели, если не находиться в модели, то
    обьект должен быть составлен из параметров запроса, которые совпадают с полями класса обьекта

    @RequestMapping(value="/owners/{ownerId}/pets/{petId}/edit", method = RequestMethod.POST)
    public String processSubmit(@ModelAttribute Pet pet) { }

    Подоюный пример, указывает что обьект pet может быть взят из
        1. Сессии, используя @SessionAttributes
        2. Уже, находиться в модели, используя @ModelAttribute
        3. Сформирован из параметров запроса
        4. Получен из конструктора

    @ModelAttribute - это обычный способ получать модель из базы, которая могла опционально поместить сущность используя
     @SessionAttributes

     В следующем примере имя @ModelAttribute account совподает с блоком URL {account}, если был зарегестрирован конвертер
      Converter<String, Account>, то строкове предсовление может вернуться, как обьект Account
         @RequestMapping(value="/accounts/{account}", method = RequestMethod.PUT)
         public String save(@ModelAttribute("account") Account account) {
         }

      Проверка в случе не успешного формирования обьекта из параметров запроса:

          @RequestMapping(value="/owners/{ownerId}/pets/{petId}/edit", method = RequestMethod.POST)
          public String processSubmit(@ModelAttribute("pet") Pet pet, BindingResult result) {
              if (result.hasErrors()) {
                  return "petForm";
              }
              // ...
          }

@SessionAttributes






@RestController

Для более простого способа, работы с REST запросами, вметсто обьявлять их как @RequestMapping методы с  @ResponseBody
Используеться аннотация @RestController вместо @Controller