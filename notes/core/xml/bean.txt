Тег Бина




########################################################################################################################
Аттрибуты beans

------------------------------------------------------------------------------------------------------------------------

id ( name ) = [id(name) | name,name2,name3]
    Идентифицирует бин в контексте.
    Может быть больше чем один идентификатор ( только атрибут "name", имена разделены "," либо ";" )
    Параметр не обязательный, но нужен для ссылки на этот бин из другого бина
    Поддерживаемые символы: [a-zA-z] + спец сиволы

------------------------------------------------------------------------------------------------------------------------
class=[classFullName]
    Предоставляет контейнеру доступ к конретному java классу.
    Для статических внуртенних классов используеться бинарное имя:
                    com.example.Foo$Bar,
    где

------------------------------------------------------------------------------------------------------------------------

factory-method=[methodNameInClass]

 Предостовляет доступ к статическому методы класса, который возвращает обьект этого же класса:

        <bean id="clientService" class="examples.ClientService" factory-method="createInstance"/>

        public class ClientService {
            ...
             public static ClientService createInstance()
            ...
        }

    Реализация не статичного фабричного метода. Используеться в основном для фабрик, где уже у готового
    обьекта нужно получить другой обьект через метод:

        Фабрика:
        <bean id="serviceLocator" class="examples.DefaultServiceLocator">

   Аттрибут "class" опускаеться, вместо него указываеться аттрибут "factory-bean" c ссылкой на бин
   фабрики:
        <bean id="clientService"
            factory-bean="serviceLocator"
            factory-method="createClientServiceInstance"/>

------------------------------------------------------------------------------------------------------------------------

depends-on=[beanId]

    Аттрибут depends-on необходим для указание контейнеру, что для загрузки данного бина сперва нужно загрузить
    укзанный в атрибуте

        Пример:
            <bean id="beanOne" class="ExampleBean" depends-on="manager"/>
            <bean id="manager" class="ManagerBean" />


------------------------------------------------------------------------------------------------------------------------

lazy-init=[true|false(default)]

    Аттрибут lazy-init нужен для указание контейнеру, что инициализация данного бина будет проведене, только если этот
    бин востребуеться системой
    Пример:
        <bean id="lazy" class="com.foo.ExpensiveToCreateBean" lazy-init="true"/>

------------------------------------------------------------------------------------------------------------------------
scopes=[prototype|singleton|session|request|application|]

    Смотри notes/basic/context/Scopes.txt

    <bean id="userPreferences" class="com.foo.UserPreferences" scope="session" />


------------------------------------------------------------------------------------------------------------------------

abstract=[true|false(default)]

    Аттрибут abstract="true" укзывает контейнеру не иницилизировать бин, а использовать как шаблон, попытка внедрения или
    получение ссылки на этот бин вызовет ошибку.
    Использования наследования для реализации описания контеста бинов, может быть выполненна в качестве шаблонов,
    что способствует быстрой разработке приложения:

        <bean id="inheritedTestBean" abstract="true"
                class="org.springframework.beans.TestBean">
            <property name="name" value="parent"/>
            <property name="age" value="1"/>
        </bean>

        Важно, если такого рода шаблоны используються для одиночек, где контейнер инициализирует из изначально по умолчанию, важно
        что бы аттрибут abstract="true" присутствовал

------------------------------------------------------------------------------------------------------------------------

parent=[beanId]

    Наследоватльеная связь формируеться чере указания атрибуту parent идентификатор бина родителя. Дочерний бин получает
    все параметры родительского

    <bean id="inheritsWithDifferentClass"
            class="org.springframework.beans.DerivedTestBean"
            parent="inheritedTestBean" init-method="initialize">

        <!-- Значение переопределяеться -->
        <property name="name" value="override"/>

        <!-- Остальные настройки будут взяты с описания родителя -->
    </bean>

------------------------------------------------------------------------------------------------------------------------

########################################################################################################################

Дочерние теги

------------------------------------------------------------------------------------------------------------------------
lookup-method

   Смотри notes/basic/context/Method Injection.txt

       <bean id="commandManager" class="fiona.apple.CommandManager">
           <lookup-method name="createCommand" bean="command"/>
       </bean>


------------------------------------------------------------------------------------------------------------------------
constructor-arg
    Тег в который указывает аргументы конструктора\фабричного метода. Совет: используй для обектов которые
    должны быть в классе и скорее всего должны быть не изменяемые иначе лучше использовать property

       ref - сылка на бин который нужно передать в качестве аргуманта для конструктора
       type - указание простого типа для валидации аргументов
       index - указываеь последовательность элементов
       name - имя аргумента ( для работы с нужно компилировать в дебаг моде или укзать аннотацию
               @ConstructorProperties. Пример: @ConstructorProperties({"years", "ultimateAnswer"}) )

    Используя префикс "c:" можно обявить аругменты конструтора бина

     Пример:
        <beans ... xmlns:c="http://www.springframework.org/schema/c" ... >
             <bean id="foo" class="x.y.Foo" c:bar-ref="bar" c:baz-ref="baz" c:email="foo@bar.com"/>
        </beans>


------------------------------------------------------------------------------------------------------------------------

########################################################################################################################