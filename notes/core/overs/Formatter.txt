Formatter SPI
    Представляет собой простой и многоразовый. Используеться когда нужно работать с клиентской средой, типа web, где
    нужно паристь и выводить локализированные значения. Интрефейс форматтера:

        public interface Formatter<T> extends Printer<T>, Parser<T> {
        }


        public interface Printer<T> {
            String print(T fieldValue, Locale locale);
        }


        import java.text.ParseException;
        public interface Parser<T> {
            T parse(String clientValue, Locale locale) throws ParseException;
        }

    Что бы создать собственный форматтер просто реализутей его интерфейс.

FormatterRegistry SPI
    Используеться для ресистрации FormatterRegistry

    public interface FormatterRegistry extends ConverterRegistry {

         // Для опредленного типа полей
        void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser);
        void addFormatterForFieldType(Class<?> fieldType, Formatter<?> formatter);

        //Для всех полей
        void addFormatterForFieldType(Formatter<?> formatter);

        // регестрация аннотации
        void addFormatterForAnnotation(AnnotationFormatterFactory<?, ?> factory);
    }

FormatterRegistrar SPI
FormatterRegistrar полезен когда нужно зарегестрировать несколько  форматеров по специальным категориям форматирования,
таким как Date formatting



