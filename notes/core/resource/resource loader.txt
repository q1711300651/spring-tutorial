ResourceLoader

    Этот интерфейс реализуют обекты что могут возвращаять/загружать рессурсы:

            public interface ResourceLoader {
                Resource getResource(String location);
            }

    Так же можно получить дуступ к рессурсу через метод getResource( location ):

        Resource template = ctx.getResource("some/resource/path/myTemplate.txt");

    В пути, не обязательно указывть специальный префикс протокола, спринг загружает рессурс исходя из контекста:

    ClassPathXmlApplicationContext: вернет ClassPathResource
    FileSystemXmlApplicationContext: вернет FileSystemResource
    FileSystemResource: вернет ServletContextResource
    и т. д.

    Указывая префикс, формируються рессурсы исходя из протокола:

    Префикс             Пример
    classpath:          classpath:com/myapp/config.xml
    file:               file:///data/config.xml
    http:               http://myserver/ logo.png
    none                /data/config.xml ( в зависимости от контекста )


ResourceLoaderAware

    Этот интерфейс специалный маркер идентифицирующий обьекты что ожидают загрузки рессурсов по конкретному загрузчику:

        public interface ResourceLoaderAware {
            void setResourceLoader(ResourceLoader resourceLoader);
        }

    Если бин реализует данный интерфейс то на момент инициализации будет вызван метод setResourceLoader и передан
    текущий загрзчик

    Либо выполнить автозазгузку @Autowiring / @Inject

Специальный префикс classpath*: указывает поиск по всем classpath, обычно в веб проложениях используеться несколько
класслоудеров и данный аттрибут указывает на поиск по всем доступным класс пасам
Для корретной работы нужно указать хотябы одну рутовую категорию перед паттерном, такой пример "classpath*:*.xml"
не будет работать