Жизненный цикл обьектов.
По умолчанию спринг поддерживает 5 стратегий контроля жизненного цикла бинов.

Одиночка (singleton) - задан по умолчанию, единственный обьект на все время существования контейнера

    В Spring одиночка немного отличаеться от обычного паттерна, в простом представлении одиночка живет на протежении
     существоавания classLoader и в его приделах. В то время, как в Spring одиночка живет в пределах контейнера.

     Так как, это значение по умолчанию применима к каждому бину, то нет нужды обьявлять его явно, вот пример:
        <bean id="accountService" class="com.foo.DefaultAccountService" scope="singleton"/>


Прототип (prototype) - реализация множества обьектов, по необходимости

    Используй прототипы, когда необходимо сохранять состояние обьекта, в ином случае используй singleton
    Метод обартного вызова при уничтожении бина с циклом жизни "прототип" не вызываеться, так как контейнер
    не контролирует существования бина, предостовляе эту задачу клиентскому коду.
    Что бы дать возможность спрингу, особождать нужно использовать собстваннй BeanPostProcessor

    Для использования прототипов внутри одиночки, нужно учитывать, что контейнер выполняте иньекцию только один раз,
    в момент инициализации, так что если одиночке потребуеться новый прототип можно использовать иньекуцию методов.

SimpleThreadScope - реализация области видимости, где бины привязанны к жизни потока.
    Данная реализация есть в контейнере, но её нужно зарегстрировать, пример:
        Scope threadScope = new SimpleThreadScope();
        beanFactory.registerScope("thread", threadScope);

запрос(request) - создает обьект живущий только на протежение  HTTP запроса, каждый новый запрос получает новый обьект ( работает только для web контекста )
сессия(session) - создает обьект для HTTP сессии, работает только для web контекста
глобальная сессия - создает обьект для HTTP сессии, обычно для контекста портлетов, работает только для web контекста
приложение(application) - создает единственный обьект, с жизненным циклом Контеста Сервлетов, работает только для web контекста
    Область видимости "приложение" схоже с одиночкой, но есть два отличия:
        1.продолжительность жизни бина связана с контекстом сервлетов;
        2.данный бин может быть доступен черес контескст сервлетов


Web бины, как зависимости

    Что бы внедрить зависимость, скжем сессионого бина, необходимо указать контейнеру, что бы тот использовал
    прокси обьекты. В таком случае будет внедрен, прокси, который сможет делегировать вызовы текущему актуальному бину
    Примечание, не нужно использовать для одиночки и прототипа

    Пример:

        <bean id="userPreferences" class="com.foo.UserPreferences" scope="session">
            <aop:scoped-proxy/>
         </bean>

        <!-- одиночка получает ссылку на прокси сессионый бина -->
        <bean id="userService" class="com.foo.SimpleUserService">
           <!-- ссылка на прокси  -->
           <property name="userPreferences" ref="userPreferences"/>
        </bean>

    Прокси, делегирует только публичные методы

    Также можно использовать стандартный JDK прокси, в случае если не нужны доп. библеотека для формирования CGLIB-прокси
    Но, это так же значит, что бин должен быть реализацией, покрайней мере одного интерфейса, и тип интерфейса должен быть
    полем куда этот бин внедряеться.




Собственные области видимости

    Для реализации собственной области видимости нужно наследоваться от org.springframework.beans.factory.config.Scope
    Нужно реализовать следующие методы:

        Object get(String name, ObjectFactory objectFactory)
            Данный метод возвращает обьект под этой области видимости

        Object remove(String name)
            Данный метод, выполняеться когда нужно удалить обект и вернуть. null если обьект не найден

        void registerDestructionCallback(String name, Runnable destructionCallback)
            Регистрация функций обратного вызова на момент удаление обьекта

        String getConversationId()
            Возвращает идентьифкатор текщей области видимости. Должен быть разным для каждой области видимости, к примеру
            сессионая область видимости возвращает идентификатор сессии


    После нужно зарегестрировать область видимости методом в реализации ApplicationContext
            void registerScope(String scopeName, Scope scope);





