id ( name )
    Идентифицирует бин в контексте.
    Может быть больше чем один идентификатор ( только атрибут "name", имена разделены "," либо ";" )
    Параметр не обязательный, но нужен для ссылки на этот бин из другого бина
    Поддерживаемые символы: [a-zA-z] + спец сиволы

class
    Предоставляет контейнеру доступ к конретному java классу.
    Для статических внуртенних классов используеться бинарное имя:
                    com.example.Foo$Bar,
    где


factory-method
    Предостовляет доступ к статическому методы класса, который возвращает обьект этого же класса:

        <bean id="clientService" class="examples.ClientService" factory-method="createInstance"/>

        public class ClientService {
            ...
             public static ClientService createInstance()
            ...
        }

    Реализация не статичного фабричного метода. Используеться в основном для фабрик, где уже у готового
    обьекта нужно получить другой обьект через метод:

        Фабрика:
        <bean id="serviceLocator" class="examples.DefaultServiceLocator">

   Аттрибут "class" опускаеться, вместо него указываеться аттрибут "factory-bean" c ссылкой на бин
   фабрики:
        <bean id="clientService"
            factory-bean="serviceLocator"
            factory-method="createClientServiceInstance"/>


depends-on
    Аттрибут depends-on необходим для указание контейнеру, что для загрузки данного бина сперва нужно загрузить
    укзанный в атрибуте

        Пример:
            <bean id="beanOne" class="ExampleBean" depends-on="manager"/>
            <bean id="manager" class="ManagerBean" />

lazy-init
    Аттрибут lazy-init нужен для указание контейнеру, что инициализация данного бина будет проведене, только если этот
    бин востребуеться системой
    Пример:
        <bean id="lazy" class="com.foo.ExpensiveToCreateBean" lazy-init="true"/>

default-lazy-init
    Укзывать на уровне контекста, о моменте инициалиации, сразу или по востребованию.

        <beans default-lazy-init="true">
            <!-- Не один бин не будет сразу инициализировани -->
        </beans>

Пример инициализации бинов

Через сеттер

<bean id="exampleBean" class="examples.ExampleBean">                    public class ExampleBean {

    <!-- инициализация бина через тег -->                                   private AnotherBean beanOne;
    <property name="beanOne">                                               private YetAnotherBean beanTwo;
        <ref bean="anotherExampleBean"/>                                    private int i;
    </property>
                                                                            public void setBeanOne(AnotherBean beanOne) {
    <!-- а тут через аргумент -->                                               this.beanOne = beanOne;
    <property name="beanTwo" ref="yetAnotherBean"/>                         }

    <property name="integerProperty" value="1"/>                            public void setBeanTwo(YetAnotherBean beanTwo) {
</bean>                                                                         this.beanTwo = beanTwo;
                                                                            }
<bean id="anotherExampleBean" class="examples.AnotherBean"/>                public void setIntegerProperty(int i) {
<bean id="yetAnotherBean" class="examples.YetAnotherBean"/>                      this.i = i;
                                                                            }
                                                                        }

Конструктор

<bean id="exampleBean" class="examples.ExampleBean">                    public class ExampleBean {

     <!-- использования дочернего тега -->                                  private AnotherBean beanOne;
     <property name="beanOne">                                              private YetAnotherBean beanTwo;
         <ref bean="anotherExampleBean"/>                                   private int i;
     </property>
                                                                            public ExampleBean(
     <!-- использование аттрибута  -->                                          AnotherBean anotherBean, YetAnotherBean yetAnotherBean, int i) {
     <property name="beanTwo" ref="yetAnotherBean"/>                            this.beanOne = anotherBean;
     <property name="integerProperty" value="1"/>                               this.beanTwo = yetAnotherBean;
 </bean>                                                                        this.i = i;
                                                                            }
 <bean id="anotherExampleBean" class="examples.AnotherBean"/>
 <bean id="yetAnotherBean" class="examples.YetAnotherBean"/>


Фабричный метод


<bean id="exampleBean" class="examples.ExampleBean" factory-method="createInstance">    public class ExampleBean {
    <constructor-arg ref="anotherExampleBean"/>                                                 private ExampleBean(...) { ... }
    <constructor-arg ref="yetAnotherBean"/>                                                     public static ExampleBean createInstance (
    <constructor-arg value="1"/>                                                                      AnotherBean anotherBean, YetAnotherBean yetAnotherBean, int i) {
</bean>                                                                                               ExampleBean eb = new ExampleBean (...);
<bean id="anotherExampleBean" class="examples.AnotherBean"/>                                          ...
<bean id="yetAnotherBean" class="examples.YetAnotherBean"/>                                           return eb;
                                                                                                }
                                                                                         }

constructor-arg
    Тег в который указывает аргументы конструктора\фабричного метода. Совет: используй для обектов которые
    должны быть в классе и скорее всего должны быть не изменяемые иначе лучше использовать property

    ref - сылка на бин который нужно передать в качестве аргуманта для конструктора
    type - указание простого типа для валидации аргументов
    index - указываеь последовательность элементов
    name - имя аргумента ( для работы с нужно компилировать в дебаг моде или укзать аннотацию
           @ConstructorProperties. Пример: @ConstructorProperties({"years", "ultimateAnswer"}) )

property
   Тег, что внедреняет зависмиости через сетер класса

Аттрибуты и Параметры:
    1. value - принемает занчение в удобочетаемом строковом представлении

    Пример
        <bean id="myDataSource" ... >
            <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
            ....
        </bean>

   2. idref - тег, простой и безопасный способ передать идентификатор ( не ссылку на бин ).

   Пример
        <bean id="theTargetBean" class="..."/>
        <bean id="theClientBean" class="...">
            <property name="targetName">
                <idref bean="theTargetBean" />
            </property>
        </bean>

        Способ через value
        <bean id="theTargetBean" class="..." />
        <bean id="client" class="...">
            <property name="targetName" value="theTargetBean" />
        </bean>

   Оба способа эквиваленты, но использования первого выполняет проверку в момент деплоя на действительность
   существования бина под указанный идентификатор

   3. ref -  Формирует зависимость с другим бином, путем передачи ссылки на него через идентификатор.

   Пример
        <ref bean="someBean"/>

   Аттрибут parent, используеться когда нужно указать на бин с тем же именем, только в радительском контейнере.

   Пример:
        <!-- Тут контекст радителького контейнера -->
        <bean id="accountService" class="com.foo.SimpleAccountService">
            <!-- ... -->
        </bean>

        <!-- Тут контекст дочернего контейнера -->
        <bean id="accountService" <!-- бин назван также как и в родительском -->
            class="org.springframework.aop.framework.ProxyFactoryBean">
            <property name="target">
                <ref parent="accountService"/> <!-- формирует ссылку на бин в родительском контейнере -->
            </property>
            <!-- ... -->
        </bean>

   Вложенный бин
        Используеться когда нужно указать зависимость, где больше нигде кроме этого бина не используется
        Данный способ игнорирует атрибуты scope, id, name во вложенном бине.

   Пример
        <bean id="outer" class="...">
            <!-- Вместо использования сслки на нужный бин, просто выпешите его внутри property -->
            <property name="target">
                <bean class="com.example.Person"> <!-- this is the inner bean -->
                    <property name="name" value="Fiona Apple"/>
                    <property name="age" value="25"/>
                </bean>
            </property>
        </bean>

   4. Collections - В <list/>, <set/>, <map/>, и <props/> можно указать элементы для Java коллекций тип
   List, Set, Map, и Properties, соответсвенно:

    <property name="...">

        <props>
            <prop key="custom_key">custom_value</prop>
        </props>

        <list>
            <value>...</value>
                или
            <ref bean="...">
        </list>

        <map>
            <entry key="an entry" value="just some string"/>
                или
            <entry key ="a ref" value-ref="..."/>
        </map>

        <set>
            <value>...</value>
                или
            <ref bean="...">
        </set>
    </property>

    Значение карты или ключ, или значение set, list может принемать следующие формы:
        bean (внутренний бин) | ref(сслыка) | idref(идентификатор) | list( внутренний лист) |
        set ( внутрение перечисление ) | map ( внутрения карта)  | props ( внутриня карта параметров ) |
        value(значение) | null


   Слияние коллеций - Spring позволяет сливать коллеция из родительских бинов с дочерними,
   реузльтат будет присвоен дочернему бину

   <beans>
       <bean id="parent" abstract="true" class="example.ComplexObject">
           <property name="adminEmails">
               <props>
                   <prop key="administrator">administrator@example.com</prop>
                   <prop key="support">support@example.com</prop>
               </props>
           </property>
       </bean>

       <bean id="child" parent="parent">
           <property name="adminEmails">
               <!-- аттрибут merge="true" указывает конейнеру на слияние из свойства дочернего и родительского -->
               <props merge="true">
                   <prop key="sales">sales@example.com</prop>
                   <prop key="support">support@example.co.uk</prop>
               </props>
           </property>
       </bean>
   <beans>

   Properties дочернего бина наследует все елементы родительского переопределяя значение в родительской коллекции
   Вывод
       administrator=administrator@example.com
       sales=sales@example.com
       support=support@example.co.uk

   Ограничения слияния:
        1. Нельзя выполнить слияние разных типов коллеций
        2. Аттриьут слияние должен быть указан в дочерней коллекции



   Композиционное имя свойства бина
   Можно указывать свойства своайсва бина, если имя будет через точку в названии, т. е:
        <bean id="foo" class="foo.Bar">
            <property name="fred.bob.sammy" value="123" />
        </bean>
   Где значение 123 присваеваеться к свойству sammy у обьекта bob, что в свою очередь являеться
   свойством обьекта fred, который являеться свойстом данного бина.
   Если цепоча не верна будет брошена NullPointerException


   Сокращенное обявление

   Используя префикс "p:" можно обьявлять параметры в качестве аттрибутов а не дочерних тегов.

   Пример:
       <beans ... xmlns:p="http://www.springframework.org/schema/p" ... >
           ...
           <!-- Простой обьевление параметры с строковым значением -->
           <bean id="myDataSource" ... p:driverClassName="com.mysql.jdbc.Driver" ... />

           <!-- Обьевление ссылки на бин выполняеться по шаблону "имя параметра-ref" -->
            <bean name="john-modern"
            class="com.example.Person" p:name="John Doe" p:spouse-ref="jane"/>

       </beans>


   Используя префикс "c:" можно обявить аругменты конструтора бина

    Пример:
       <beans ... mlns:c="http://www.springframework.org/schema/c" ... >
            <bean id="foo" class="x.y.Foo" c:bar-ref="bar" c:baz-ref="baz" c:email="foo@bar.com"/>
       </beans>
