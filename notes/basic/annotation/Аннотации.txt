@ConstructorProperties - аннотация представлет собой стек названий аргументов в контруторе/фабричном метода для
                         внедрение зависимости через имя аргумента

------------------------------------------------------------------------------------------------------------------------

@Required - аннотация указывает на свойство, которое обязательно должно быть заполененно.

------------------------------------------------------------------------------------------------------------------------

@Autowired или @Inject - отмечаеткак требующий автозаполнения внедрение зависимости Spring.

Используя эту аннотацию, не нужно заботиться о том, как лучше всего передать классу или bean'у экземпляр другого bean'a.
Фреймворк Spring сам найдет нужный bean и подставит его значение в свойство, которое отмечено аннотацией @Autowired.

Пример для сеттера:

     @Autowired
        public void setMovieFinder(MovieFinder movieFinder) {
            this.movieFinder = movieFinder;
        }

Пример для метода, Конструтора:

    @Autowired
    public void prepare(MovieCatalog movieCatalog, CustomerPreferenceDao customerPreferenceDao) {
        this.movieCatalog = movieCatalog;
        this.customerPreferenceDao = customerPreferenceDao;
    }

Пример для поля:

    @Autowired
    private MovieFinder movieFinder;

Таже возможно внедрить все бины, одного типа в поле массив

     @Autowired
     private MovieCatalog[] movieCatalogs;

или для коллекций

     private Set<MovieCatalog> movieCatalogs;
        @Autowired
        public void setMovieCatalogs(Set<MovieCatalog> movieCatalogs) {
            this.movieCatalogs = movieCatalogs;
        }

Или даже Карты, где ключом обязательно должнен быть тип Строки, где будет имя бина, а значение типа:


     @Autowired
        public void setMovieCatalogs(Map<String, MovieCatalog> movieCatalogs) {
            this.movieCatalogs = movieCatalogs;
        }



Также можно использовать Autowired для внедрение стандартного интерфейся спринга ( BeanFactory,  ApplicationContext,
    Environment,  ResourceLoader, ApplicationEventPublisher,  and  MessageSource)

     @Autowired
     private ApplicationContext context;


Параметры

    required - по умаолчанию Autowired падает, когда не находит нужный тип для внедрение, это поведение можно изменить
               указав false в данный параметр
                    @Autowired(required=false)


Важно
@Autowired,  @Inject,  @Resource,  and  @Value - используют страндартную BeanPostProcessor реализвацю, что значит что они
неподдерживают собственные  BeanPostProcessor or BeanFactoryPostProcessor типы, используйте xml или java конфигурацию

------------------------------------------------------------------------------------------------------------------------

@Qualifier или @Named

    Из-за того что Autowired может найти несколько кандидатов на указанный тип в бине, для уточнения испольуется Qualifier:

        @Autowired
        @Qualifier("main")
        private MovieCatalog movieCatalog;

        или для аргумента

        @Autowired
        public void prepare(@Qualifier("main")MovieCatalog movieCatalog...

        Qualifier - это не сслыка на id бина, а лишь совпадение с ним, правельным решением использования будет
        применять имена для id и Qualifier, какхарастиристика, к примеру main или persistent:

             <bean class="example.SimpleMovieCatalog">
                    <qualifier value="main"/>
             </bean>

        Так же с помошью Qualifier, можно соберать подгрупу бинов в коллекции, которые совпадают с указанным qualifier


    Можно создасть собственный квалификатор

    @Qualifier
    public @interface Genre {
        String value(); // Можно и без параметров, квалифицируя только по типу

        Format format(); // Или же добовлять собственные,

    }
    ....
    @Autowired @Genre("Action")
    private MovieCatalog actionCatalog;
    ...
    <bean class="example.MovieCatalog">
         <qualifier type="Genre" value="Action">
             <attribute key="format" value="VHS"/> <!-- Тогда нужно добавит под-тэг в квалификатор -->
         </qualifier>
    </bean>



    Использования дженериков, в качетсве квалификаторов:

    Скажем интерфейс Store<T> имеет два дочерних интерфейсов StringStore extend Store<String> и
        IntegerStore extend Store<Integer>, тогда в с java контекстов, будет выглядить так:

            @Configuration
            public class MyConfiguration {
                @Bean public StringStore stringStore() { return new StringStore(); }
                @Bean public IntegerStore integerStore() { eturn new IntegerStore(); }
            }
            ...
            @Autowired
            private Store<String> s1; // <String> квалификатор, внедряет stringStore бин
            @Autowired
            private Store<Integer> s2; // <Integer>  квалификатор, внедряет integerStore бин
            @Autowired
            private List<Store<Integer>> s; // работает и с коллекцией, картой, последовательностью


    Для регистрации квалификаторов без аннотации используеться CustomAutowireConfigurer:

        <bean id="customAutowireConfigurer"
                class="org.springframework.beans.factory.annotation.CustomAutowireConfigurer">
            <property name="customQualifierTypes">
                <set>
                    <value>example.CustomQualifier</value>
                </set>
            </property>
        </bean>


    Использования Qualifier так же можно для классификации компонента:

    @Component
    @Qualifier("Action")
    public class ActionMovieCatalog implements MovieCatalog { ... }



------------------------------------------------------------------------------------------------------------------------

@PostConstruct, @PreDestroy - Аннотации для вызова методов на события жизненого цикла обьект
                                        (после создания, перед удалением, соотвественно )


------------------------------------------------------------------------------------------------------------------------

@Order или @Priority - указывает бину какой порядок ему принемать к коллекции/массиве


------------------------------------------------------------------------------------------------------------------------

@Resource

    Спринг поддерживает внедрение используя JSR-250 аннотацию Resource для полей и сеттеров.
    Resource принемает параметр "name", и по умолчанию Spring выполняет поиск по именам бинов, если имя не указанно, то
    береться имя поля

    Так же в особых случаях Resource может использоваться, как Autowired то есть искать бин для внедрене по его типу,
    к примеру:

        @Resource
        private ApplicationContext context; // имени контест нет в дескрипторе, а значить внедрение выполнилось по типу
        бина

------------------------------------------------------------------------------------------------------------------------

Аннотации стереотипы
    Это аннотации, которые присваеваються классам, что выполняют определенные часто используемые роли

@Component или @Named
    Это обобщенная аннотация, для любого Spring-упровляемого обьекта класса.
    @Repository, @Controller, @Service - все частные случаи этой аннотации.

@Repository
    Аннтоция являеться маркером для классов что представляют собой стереотип доступа к базе ( известным, как DAO )

@Controller
    Анноатция используеться для выделение классов контроллеров в Spring MVC

@Service
    Аннотация для указания класса, как сервиса, часто


------------------------------------------------------------------------------------------------------------------------

Настройка контектста из Java

@Configuration
    Аннотация указывает, что данный класс, конфигурирует Spring контекст доповляя собственные бины и доп. параметры

@ComponentScan
    Анноатиця указывает пакеты в параметре basePackages, которые необходимо просканировать для посика
    конфигирируемых компонентов для Spring используеться вместе с Configuration, так же можно использовать value параметр:

        @Configuration
        @ComponentScan(basePackages = "org.example") // или @ComponentScan("org.example")
        public class AppConfig  {
        ...

    Так же есть возможность настроить фильтрацию для классов, более детально смотри
    context/Расширинные настройки контекста.txt "context:component-scan":

    @ComponentScan(basePackages = "org.example",
            includeFilters = @Filter(type = FilterType.REGEX, pattern = ".*Stub.*Repository"),
            excludeFilters = @Filter(Repository.class))

------------------------------------------------------------------------------------------------------------------------

@Scope

------------------------------------------------------------------------------------------------------------------------

@Lazy

Квалифицирует бин как бин с отложенной загрузкой, так же можно указать для полей помеченных как @Autowired или @Inject,
тогда спринг загрузит поле в момент обращение к ниму


------------------------------------------------------------------------------------------------------------------------

@Singleton - JSR-330

Тоже что и Scope("singleton")

------------------------------------------------------------------------------------------------------------------------

@Bean
    Анноатация используеться, когда нужно указать что данный метод, формирует новый обьект, которй в последствии будет
    использоваться контейнером Spring.

    Когда методы, аннотированные Bean находяться в классе не Configuration, такие методы называються легковесными.
    Такие методы, не могут обращяться к другим методам Bean для получение зависимостей

    Рекомедуемо создовать бины только в класса аннотированным Configuration, во избежание проблем с ограничениями
    lite-mode


------------------------------------------------------------------------------------------------------------------------

@Configuration
    Анноатация используеться, когда нужно указать что данный класс, используеться для настройки контекста Spring,
    вызывает у себя аннотированые методы @Bean

    @Configuration
    public class AppConfig {                Эквивалент к XML:     <beans>
                                                                     <bean id="myService" class="com.acme.services.MyServiceImpl"/>
        @Bean                                                     </beans>
        public MyService myService() {
            return new MyServiceImpl();
        }

    }

    Нужн понять что формирования контекста, только с помошью java, ограничивает реализацию спринга, и не повзоляет
    выполнять некоторые более гибкие действия, которые с легкостью выполнялись бы в xml.
    Хорошей практикой будет совмещение этих подходов, как пример:

    Класс:                                                          XML:

    @Configuration                                                  <beans>
    public class AppConfig {                                          <!-- Активировать обрабутку аннотаций таких как @Autowired и @Configuration -->
        @Autowired                                                    <context:annotation-config/>
        private DataSource dataSource;
        @Bean                                                         <context:property-placeholder location="classpath:/com/acme/jdbc.properties"/>
        public AccountRepository accountRepository() {
            return new JdbcAccountRepository(dataSource);             <bean class="com.acme.AppConfig"/>
        }
        @Bean                                                         <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        public TransferService transferService() {                       <property name="url" value="${jdbc.url}"/>
            return new TransferService(accountRepository());             <property name="username" value="${jdbc.username}"/>
        }                                                                <property name="password" value="${jdbc.password}"/>
    }                                                                  </bean>
                                                                    </beans>

    Файл настройки:

        jdbc.properties
        jdbc.url=jdbc:hsqldb:hsql://localhost/xdb
        jdbc.username=sa
        jdbc.password=


------------------------------------------------------------------------------------------------------------------------
@ImportResource

Аннотация @Import анологична тегу <import /> в xml, она импортирует xml конфигурацию

------------------------------------------------------------------------------------------------------------------------

@Import

Аннотация @Import анологична тегу <import /> в xml, она импортирует класс конфигурацию

------------------------------------------------------------------------------------------------------------------------

 @Profile

 Частный случай @Conditional, принемает текстовый парметр, и ищеет на соответсвие в доступных параметрах среды.


------------------------------------------------------------------------------------------------------------------------

 @Conditional

 Аннотация, которая помечает @Bean метод, и указывает на небходиомсть удовлетворение условие прежде чем можно будет
 создать бин


------------------------------------------------------------------------------------------------------------------------