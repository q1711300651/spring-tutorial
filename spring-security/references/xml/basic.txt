<http/>

Родительский элемент для всех web конфигураций Spring Security
------------------------------------------------------------------------------------------------------------------------

<headers />

Настройка хедеров для HTTP запросов

    Параметры:
         defaults-disabled [true|false!] - позволяет отключить настройки хедеров по умолчанию
         disabled [true|false!] - позволяет отключить хедеры

    <frame-options />
        Позволяет настроить правила обработки iframe, frame,

        Параметры:
            policy [DENY|SAMEORIGIN]- собственно деректива указывающе правило
                    DENY - запрещает подгрузку браузером страниц в frame
                    SAMEORIGIN - позволяет только загружать для одного домена

    <cache-control/>
        Настройка кеширования в HTTP запросов. Для предотвращение возможности посещать закешированные страницы

    <content-type-options />
            Отключает поддержку "угадывание" типа загружаемого фала браузером, для предотвращение XSS

    <hsts/>
        HTTP Strict Transport Security - заставляет браузер работать в https режиме для указанного дамена
                                         Хедер может быть добавлен только для https ответа
             Параметры:

             include-subdomains - поключить саб домены
             max-age-seconds - кол. времени сколько может домен трактоваться как hsts

    <header>
        Используеться для указание собственного хедера

        Параметры:
            name - ключ
            value - значение


------------------------------------------------------------------------------------------------------------------------

<intercept-url/>
    Правило для перехвата урл запросов. Поддерживаеться множество обьявлений, порядок которых зависи от места обьявление
    чем выше тем более приоритетние.
    Параметры:
        1.pattern - опредляет паттерн для перехвата урл запроса ( ant стиль поттерна )
            Примеры:
                pattern="/**" - все запросы
                pattern="/security/*/hello" - запросы с началом /security потом любая строка в конце /hello
        2.access - определяет требования доступа к указанному урлу (По умолчанию это просто разделенный
                   запятой список досутпных ролей)
        3.method - укзать спецефичный метод(PUT, POST, GET ect.) запроса что нужно перехватить
        4.requires-channel [http|https|any] - если укзанно, к примеру только https, то когда пользователь попытаеться
                                              обратиться к подобному ресурсу по http его автоматически перенапрявит к
                                              https
    Если использовать паттерн "/**" то нужно учесть что страница авторизации ДОЛЖНА быть доступной для не
    зарегестрированного пользователя. т.е нужно указать дополнительное правило выше обычного:

        <intercept-url pattern="/login.jsp*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>

        IS_AUTHENTICATED_ANONYMOUSLY - для не зарегестрировнных пользователей

------------------------------------------------------------------------------------------------------------------------

<port-mappings />
    Связывает не стандартные порты с каналом связи
    Пример:
        <port-mappings>
            <port-mapping http="9080" https="9443"/>
        </port-mappings>


------------------------------------------------------------------------------------------------------------------------

<form-login />
     Выполнение редиректа на форму авторизации

     Параметры:
        login-page - урл на страницуц с формой авторизации
        default-target-url - указать урл куда поподет пользователь после авторизации
        always-use-default-target - всегда переводить пользователя на страницу по умолчанию
        authentication-success-handler-ref - альтернатива к default-target-url, использует обьект
                                             AuthenticationSuccessHandler для обрабокти усешной авторизации

------------------------------------------------------------------------------------------------------------------------
<http-basic />
      Авторизация пользователя базовым аторизационным способом.

      Пример:
          <http>
              <intercept-url pattern="/**" access="authenticated"/>
              <form-login />
              <http-basic />
          </http>

------------------------------------------------------------------------------------------------------------------------

<authentication-manager/>
    Менеджер регестрирует провайдеров аутентификации.

------------------------------------------------------------------------------------------------------------------------

<authentication-provider/>
    Елеметны создает DaoAuthenticationProvider бин

    Параметры:
        user-service-ref - ссылка на собственный UserDetailsService(обработчик результатов авторизации)


------------------------------------------------------------------------------------------------------------------------

<user-service/>
    Елеметны создает InMemoryDaoImpl бин. Простой способ зарегестрировать пользователей в системе

    дочерниый элемент:

    <user/> - указывает на пользователья в системя Spring Security
        Параметры:
        name - идентификатор пользователя
        password -пароль
        authorities - список ролей привязанных к пользователю
            Пример:
                authorities="ROLE_USER, ROLE_ADMIN"

------------------------------------------------------------------------------------------------------------------------

<jdbc-user-service/>
    Сервис предостовляемый Spring Security для обработки запросов через бд.

    Параметры:
        data-source-ref - ссылка на DataSource

------------------------------------------------------------------------------------------------------------------------

<password-encoder />

    Зарегестрировать обработчик шифрования.

    Пример:

            <beans:bean name="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
            <authentication-manager>
                <authentication-provider>
                    <!--
                        Bcrypt  - это хороший выбор для множества случаев, только если существующая система уже
                        использует собственный алгоритм
                    -->
                    <password-encoder ref="bcryptEncoder"/>
                    <user-service>
                        <user name="jimi" password="d7e6351eaa13189a5a3641bab846c8e8c69ba39f"
                                authorities="ROLE_USER, ROLE_ADMIN" />
                        <user name="bob" password="4e7421b1b8765d8f9406d87e7cc6aa784c4ab97f"
                                authorities="ROLE_USER" />
                    </user-service>
                </authentication-provider>
            </authentication-manager>
            
 ------------------------------------------------------------------------------------------------------------------------
 
 <session-management/>
 
 
     параметры:
         invalid-session-url - на указанный УРЛ перенапраляеться пользователь в случае Spring Security обнаружит
                               не активную сессию
         session-authentication-error-url - на указанный УРЛ перенарправляеться пользователь если возникает
                                            "unauthorized" (401) ошибка
 
     Дочерний елемент:
         <concurrency-control/>
 
             Параметры:
                 max-sessions [0-9] - Если указанно 1, то предотвращает залогирования пользователя несколько раз,
                                      последующие запросы, уничтожают предедущие
                 error-if-maximum-exceeded [*true|false] - Если false, то попытка залогинеться уже аутентициыированным
                                                           пользователем вызовет исключение
 
 
 ------------------------------------------------------------------------------------------------------------------------
 
 <logout/>
 
     параметры:
         delete-cookies - удалить указанные cookies(через запятую, если не один) при логауте.
 
 ------------------------------------------------------------------------------------------------------------------------
 
 <listeners/>
     Регистрация в Spring Security системе слушателей
 
     дочерний елемент:
 
         <listener-class/>
             Указывает путь к классу слушателя
 
 
------------------------------------------------------------------------------------------------------------------------
<global-method-security/>
     Елемент позволяет включить защиту основаную на аннотациях
 
         Параметры:
             secured-annotations [enabled] - включает проксирование методов, с помошью аннотации, для ограничение достпа
                                             к ним.
 
             jsr250-annotations [enabled] - включает поддержку jsr250 аннотаций
 
             pre-post-annotations [enabled] - включает поддержку аннотация на основе вырожений
 
         Дочернии елементы:
 
         <protect-pointcut/>
             Регистрация аспекта для ограничений доступа к методам. Поряд устанавливаеться по положении к началу списка
 
             expression - прим. "execution(* com.mycompany.*Service.*(..))" - выражение для поиска нужных методов
             access - указание роли, которой доступен выбранный метод
 
------------------------------------------------------------------------------------------------------------------------
<remember-me/>

    Параметры:
        key [any value] - Включение простого механизма Remember Me
                         (подробнее читай "references/Authentication/Remember Me.txt" )
        data-source-ref [ref to data source object] - Включение продвинунутого механизма Remember Me
                                                      (подробнее читай "references/Authentication/Remember Me.txt" )

------------------------------------------------------------------------------------------------------------------------

<csrf />

    Cross Site Request Forgery
    Елементу обрабатывает поведение системы с кросс-доменными запросами

     Параметры:
        disabled [true!|false] - активирует обработку для кросс-доменных запросах

     Пример добавления токена:

        <c:url var="logoutUrl" value="/logout"/>
            <form action="${logoutUrl}" method="post">
                <input type="submit" value="Log out" />
                <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
        </form>

        Если используеться json, то вмерсто передачи как параметр, можно передать как http хедер:

            <html>
                <head>
                    <meta name="_csrf" content="${_csrf.token}"/>
                    <!-- default header name is X-CSRF-TOKEN -->
                    <meta name="_csrf_header" content="${_csrf.headerName}"/>
             ...

        JQuery:
            $(function () {
                var token = $("meta[name='_csrf']").attr("content");
                var header = $("meta[name='_csrf_header']").attr("content");

                $(document).ajaxSend(function(e, xhr, options) {
                    xhr.setRequestHeader(header, token);
                });
            });
------------------------------------------------------------------------------------------------------------------------

<anonymous/>

    Настройка параметров аннонимного пользователя

    Памаметры:
    enabled [true!|false]- включает/отключает поддержку аннонимного пользователя
    granted-authority - указать роли для анонимного пользователя (ROLE_ANONYMOUS по умолчанию)
    username - указать имя анонимного пользователя (anonymousUser по умолчанию)
------------------------------------------------------------------------------------------------------------------------

<method-security-metadata-source />

    Настройка обарботки вызова методов на права пользователя. Что бы использовать AspectJ вместо стандартного
    спринговского АОП, нужно указать на место
    org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor класс:
    org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor

    <protect> - Правило обработки

        Атрибуты:
            method - аоп правило для выборки методов
            access - перечень требуемых ролей

    Пример:

        <bean id="bankManagerSecurity" class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
            <property name="authenticationManager" ref="authenticationManager"/>
            <property name="accessDecisionManager" ref="accessDecisionManager"/>
            <property name="afterInvocationManager" ref="afterInvocationManager"/>

        <property name="securityMetadataSource">
             <sec:method-security-metadata-source>
                   <sec:protect method="com.mycompany.BankManager.delete*" access="ROLE_SUPERVISOR"/>
                   <sec:protect method="com.mycompany.BankManager.getBalance" access="ROLE_TELLER,ROLE_SUPERVISOR"/>
             </sec:method-security-metadata-source>
        </property>
        </bean>