Работа с примитивами

Выражение                   Результат
0x7FFFFFFF                  2147483647(int)
true                        true
null                        null


Колекции, Карты

Выражение                               Результат
inventions[3]                           четвертый элемент коллекции/массива
Members[0].Name                         Получить поле имени у первого элемента
Members[0].Inventions[6]                Получить 7 элемент в поле первого элемента коллекции/массива

Officers['president']                  Получить значение по строковому ключу

{1,2,3,4}                               Получить лист чисел
{{'a','b'},{'x','y'}}                   Получить лист листов
{name:'Nikola',dob:'10-July-1856'}      Получить карту ( одна ковычка, опциональна )
{name:{first:'Nikola',last:'Tesla'},    Получить карту, карт
dob:{day:10,month:'July',year:1856}}

new int[4]                              Получить пустой массив с длиной равной 5
new int[]{1,2,3}                        Получить массив чисел
new int[4][5]                           Получить двумерный массив

Методы

'abc'.substring(2, 3)                   вызывает метод substring у строки "abc"
isMember('Mihajlo Pupin')               вызывает функцию из контекста

Операторы (меньше (<), больше (>), меньше или равно (<=), больше или равно (>=),
           равно (==), не равно (!=), деление (/), деление с отсатком (%), отрицание (!))

2 == 2                                  Вычесляет равенство
'black' < 'block'                       Проверят порядок строк

'xyz' instanceof T(int)                 Проверка типа
'5.00' matches '^-?\\d+(\\.\\d{2})?$'   Выполнения регулярного выражения

false ? 'trueExp' : 'falseExp'          Тернарный оператор

null?:'Unknown'                         Елвис, возвращает значение по-умолчанию если переменная нулл
#{systemProperties['pop3.port'] ?: 25}

PlaceOfBirth?.City                      ?. безопасное извлечение, если PlaceOfBirth == нулл, то применяя этот оператор,
                                        выражение не возбудит NullPointerException, а вернет нулл как резульат

логические опреаторы (and, or)


Доп Возможности

Тип

T(java.util.Date)                       Возвращает класс даты

Вызов конструктора

new org.spring.                         Возвращает новый обьект
Inventor('Albert Einstein', 'German')

Если в контекте был добавлени сконфигурированный BeanResolver, то можно выполнять приск по бинам используя @ символ:

    ExpressionParser parser = new SpelExpressionParser();
    StandardEvaluationContext context = new StandardEvaluationContext();
    context.setBeanResolver(new MyBeanResolver());
    Object bean = parser.parseExpression("@foo").getValue(context);

Выборки из коллекций оператор .?

применея данный оператор ко множеству, можно применять придекаты к элементов. получая подмножество, что удовлетворяет
условию опеатора:

List<Inventor> list = (List<Inventor>) parser.parseExpression(
        "Members.?[Nationality == 'Serbian']").getValue(societyContext);

// где из переменной списка Members, получить список где
В дополение операторы
^[...] - повзовлет вывести первый совпавший елемент
$[...] - последний

Проэкция ( .! ) повзволяет получить коллекцию подвыражения елементов. Скажем есть коллекция пользователей, через проэкцию можно
вывести коллекцию городов пользователей:

Members.![placeOfBirth.city]

