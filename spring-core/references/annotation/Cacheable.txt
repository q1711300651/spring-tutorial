
@EnableCaching

    Конфигурационная аннотация, добовляеться в класс @Configurable, для активации кеша в системе

    Параметры:
        mode - ( по умолчанию proxy ) proxy - обычный Spring AOP, aspectj - использует AspectJ weaver
        proxyTargetClass -  ( по умолчанию false ) Если true, то исопльзуеться прокси на основе классов, если false
                            то используеться стандартое JDK интерфейсное проксирование
        order - ( по умолчанию  Ordered.LOWEST ) Выполнение проксиирование в порядке остальных проксирующих методов

------------------------------------------------------------------------------------------------------------------------

@Cacheable
    Кеширует результат метода

    Параметры:
        value - имя группы кешированных обьектов
        key - укзать алгоритм форирование ключа
        keyGenerator - указать на собственный генератор ключей ( использование с key вызывает исключение )
        cacheManager - указать на другой менеджер кеша
        cacheResolver - укзать не собственный контекст кеша
        condition - указать улсловие кеширование результатов

                    @Cacheable(value="book", condition="#name.length < 32")
                    public Book findBook(String name)
        unless - используеться вместе с condition, для отмены условия

                    @Cacheable(value="book", condition="#name.length < 32", unless="#result.hardback")
                    public Book findBook( String name )


    Пример:
        @Cacheable("books")
        public Book findBook(ISBN isbn) {...}


------------------------------------------------------------------------------------------------------------------------

@CacheEvict
    Очищает кеш, во время вызова метода

    Параметры:
        allEntries - [true|false] - указывает очищать всесь кеш или по ключу
        beforeInvocation - [true|false] указывает режим вызова перед, в случае true, и после в случае false

------------------------------------------------------------------------------------------------------------------------

@CachePut
    Обновляет кеш, без вмешательства в работу метода, т.е не возвращает закешированный результа не выходе.
    Поддреживает все параметры, что и аннотация @Cacheable. Используеться для уведомление кеша, чем для оптимизации

    Пример:
        @CachePut(value="book", key="#isbn")
        public Book updateBook(ISBN isbn, BookDescriptor descriptor)
    Важно:
        Использовать аннотации @CachePut и @Cacheable не рекомендуеться потому что они имеют разные поведения и
        могут привисти к неожиданным результатам

------------------------------------------------------------------------------------------------------------------------

@Caching
    Перегрупировывает несколько операций с кешом, которые связанны с вызовом метода

    Пример:

        @Caching(evict = { @CacheEvict("primary"), @CacheEvict(value="secondary", key="#p0") })
        public Book importBooks(String deposit, Date date)


------------------------------------------------------------------------------------------------------------------------

@CacheConfig
    Распостраняет некоторые основные настройки связанные с кешом на уровне класса

    Параметры:
        value - имя группы кешированных обьектов
        keyGenerator - указать на собственный генератор ключей ( использование с key вызывает исключение )
        cacheManager - указать на другой менеджер кеша
        cacheResolver - укзать не собственный контекст кеша

    Пример:
        @CacheConfig("books")
        public class BookRepositoryImpl implements BookRepository {
            @Cacheable
            public Book findBook(ISBN isbn) {...}
        }


------------------------------------------------------------------------------------------------------------------------