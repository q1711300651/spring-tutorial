Настройка контектста из Java

@Configuration
    Анноатация используеться, когда нужно указать что данный класс, используеться для настройки контекста Spring,
    вызывает у себя аннотированые методы @Bean

    @Configuration
    public class AppConfig {                Эквивалент к XML:     <beans>
                                                                     <bean id="myService" class="com.acme.services.MyServiceImpl"/>
        @Bean                                                     </beans>
        public MyService myService() {
            return new MyServiceImpl();
        }

    }

    Нужн понять что формирования контекста, только с помошью java, ограничивает реализацию спринга, и не повзоляет
    выполнять некоторые более гибкие действия, которые с легкостью выполнялись бы в xml.
    Хорошей практикой будет совмещение этих подходов, как пример:

    Класс:                                                          XML:

    @Configuration                                                  <beans>
    public class AppConfig {                                          <!-- Активировать обрабутку аннотаций таких как @Autowired и @Configuration -->
        @Autowired                                                    <context:annotation-config/>
        private DataSource dataSource;
        @Bean                                                         <context:property-placeholder location="classpath:/com/acme/jdbc.properties"/>
        public AccountRepository accountRepository() {
            return new JdbcAccountRepository(dataSource);             <bean class="com.acme.AppConfig"/>
        }
        @Bean                                                         <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        public TransferService transferService() {                       <property name="url" value="${jdbc.url}"/>
            return new TransferService(accountRepository());             <property name="username" value="${jdbc.username}"/>
        }                                                                <property name="password" value="${jdbc.password}"/>
    }                                                                  </bean>
                                                                    </beans>

    Файл настройки:

        jdbc.properties
        jdbc.url=jdbc:hsqldb:hsql://localhost/xdb
        jdbc.username=sa
        jdbc.password=

------------------------------------------------------------------------------------------------------------------------

@ComponentScan
    Анноатиця указывает пакеты в параметре basePackages, которые необходимо просканировать для посика
    конфигирируемых компонентов для Spring используеться вместе с Configuration, так же можно использовать value параметр:

        @Configuration
        @ComponentScan(basePackages = "org.example") // или @ComponentScan("org.example")
        public class AppConfig  {
        ...

    Так же есть возможность настроить фильтрацию для классов, более детально смотри
    context/Расширинные настройки контекста.txt "context:component-scan":

    @ComponentScan(basePackages = "org.example",
            includeFilters = @Filter(type = FilterType.REGEX, pattern = ".*Stub.*Repository"),
            excludeFilters = @Filter(Repository.class))

------------------------------------------------------------------------------------------------------------------------

@Bean
    Анноатация используеться, когда нужно указать что данный метод, формирует новый обьект, которй в последствии будет
    использоваться контейнером Spring.

    Когда методы, аннотированные Bean находяться в классе не Configuration, такие методы называються легковесными.
    Такие методы, не могут обращяться к другим методам Bean для получение зависимостей

    Рекомедуемо создовать бины только в класса аннотированным Configuration, во избежание проблем с ограничениями
    lite-mode


------------------------------------------------------------------------------------------------------------------------
@ImportResource

Аннотация @Import анологична тегу <import /> в xml, она импортирует xml конфигурацию

------------------------------------------------------------------------------------------------------------------------

@Import

Аннотация @Import анологична тегу <import /> в xml, она импортирует класс конфигурацию

------------------------------------------------------------------------------------------------------------------------

 @Profile

 Частный случай @Conditional, принемает текстовый парметр, и ищеет на соответсвие в доступных параметрах среды.

 Эта функциональность, полезна при запуске нескольких разных бинов, одного типа, к примеру для продуктива или девелопа:

        @Configuration
        @Profile("dev")
        public class StandaloneDataConfig {
            @Bean
            public DataSource dataSource() {
                return new EmbeddedDatabaseBuilder()
                    .setType(EmbeddedDatabaseType.HSQL)
                    .addScript("classpath:com/bank/config/sql/schema.sql")
                    .addScript("classpath:com/bank/config/sql/test-data.sql")
                    .build();
            }
        }

        @Configuration
        @Profile("production")
        public class JndiDataConfig {
            @Bean
            public DataSource dataSource() throws Exception {
                Context ctx = new InitialContext();
                return (DataSource) ctx.lookup("java:comp/env/jdbc/datasource");
            }
        }

   Профайлер может быть и мето-аннотацией:

   @Target(ElementType.TYPE)
   @Retention(RetentionPolicy.RUNTIME)
   @Profile("production")
   public @interface Production {
   }

   теперь @Production = @Profile("production")

   Если @Profile("production") помечен @Profile, все методы @Bean и @Import будут проверяться на условие, если в
   других конфигурациях нет своего @Profile

   Так же можно указывать множественные свойства: @Profile({"p1", "p2"}), озночает что бин будет активирован только
   если p1 и/или p2 активны
   Отрицание: @Profile({"p1", "!p2"}) = региттсрация бина будет выполненна если p1 активна или p2 не активна


------------------------------------------------------------------------------------------------------------------------

 @Conditional

 Аннотация, которая помечает @Bean метод, и указывает на небходиомсть удовлетворение условие прежде чем можно будет
 создать бин


------------------------------------------------------------------------------------------------------------------------

@PropertySource

    Аннотация предостовляет деклератиный механизм для добовление файла настроек к Spring’s Environment:


        @Configuration
        @PropertySource("classpath:/com/myco/app.properties")

        Такж как можно изспользовать EL ${..}, для получние параметров из существующих настроек:
        @PropertySource("classpath:/com/${my.placeholder:default/path}/app.properties"), где


        public class AppConfig {

            @Autowired
            Environment env;
            @Bean
            public TestBean testBean() {
                TestBean testBean = new TestBean();
                testBean.setName(env.getProperty("testbean.name"));
                return testBean;
            }
        }

------------------------------------------------------------------------------------------------------------------------