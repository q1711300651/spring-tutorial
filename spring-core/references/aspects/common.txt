Основной задачей аспектно-ориентированного программирования (АОП) является модуляризация сквозной функциональности,
выделение её в аспекты. Для этого языки, поддерживающие концепцию АОП, реализуют следующие средства для выделения
сквозной функциональности:

    аспект (aspect) – модуль или класс, реализующий сквозную функциональность. Аспект изменяет поведение
                      остального кода, применяя совет в точках соединения, определённых некоторым срезом.
                      Так же аспект может использоваться для внедрения функциональности;
    совет (advice) –  дополнительная логика — код, который должен быть вызван из точки соединения.
                      Совет может быть выполнен до, после или вместо точки соединения;
    точка соединения (join point) — точка в выполняемой программе (вызов метода, создание объекта,
                      обращение к переменной), где следует применить совет ;
    срез (pointcut) — набор точек соединения. Срез определяет, подходит ли данная точка соединения к заданному
                      совету;
    внедрение (introduction) — изменение структуры класса и/или изменение иерархии наследования для добавления
                                функциональности аспекта в инородный код;
    цель (target) – объект, к которому будут применяться советы;
    переплетение (weaving) – связывание объектов с соответствующими аспектами (возможно на этапе компиляции,
                             загрузки или выполнения программы).

Типы советов:
    before – запуск совета до выполнения точки соединения,
    after returning — запуск совета после нормального выполнения точки соединения,
    after throwing — запуск совета после выброса исключения в процессе выполнения точки соединения,
    after — запуск совета после любого варианта выполнения точки соединения,
    around – запуск совета вместо выполнения точки соединения (выполнение точки соединения может быть вызвано внутри совета).

Типы условий для точек соединения:

    execution(static * com.xyz..*.*(..)) – выполнение кода любого статического метода в пакете com.xyz;

    Общий формат выражения:
    execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)
                throws-pattern?)
    ret-type-pattern - опысывает какой тип возращает метод (* - любой)
    name-pattern - описывает имя метода (* - любой)
    param-pattern - описывает имя метода (.. - любое количество параметров 0 или блее )
                    к примеру  (*,String) - указывает, что первый параметр был любым а второй строкой
    Примеры:
            execution(public * *(..)) - любой публичный метод
            execution(* set*(..)) - метод с именем set в начале
            execution(* com.xyz.service.AccountService.*(..)) все методы интерфейса
            execution(* com.xyz.service..*.*(..)) все методы всех классов пакета и подпакета


    this/target(MyClass) – выполнение точки соединения, соответствующей ссылке/объекту типа MyClass;

    this(com.xyz.service.AccountService) - выполнить для всех прокси что реализуют AccountService
    target(com.xyz.service.AccountService) - выполнить для всех обьектов что реазуют AccountService


    args(Integer) – выполнение точки соединения, в которой доступен аргумент типа Integer;

    args(java.io.Serializable) - выполнить для всех методов, которые имеют один аргумент Serializable
                                 Разница с execution(**(java.io.Serializable)) в том что перрвый проверяет
                                 условия во время испольнения, а args выполняет статичесую проверку сигнатуры

    within - совпадает со всеми точками соединения, встречающимися в коде заданного класса;

    within(com.xyz.service.*) - все метды всех классов пакета service
    within(com.xyz.service..*) - все метды всех классов пакета service и под пакетов


    bean(idOrNameOfBean) - совпадает со всеми точками соединения, встречающимися в idOrNameOfBean


    @annotation(MyAnnotation) – выполнение точки соединения, цель которой помечена аннотацией @MyAnnotation.

    @target(MyAnnotation) - выполнение точки соединения, целевой класс которой помечена аннотацией @MyAnnotation.

    Пример @target(org.springframework.transaction.annotation.Transactional)

    @args(MyAnnotation) - выполнение точки соединения, атрибут помечен аннотацией @MyAnnotation.



    Не поддерживает Spring:

    call(void MyInterface.*(..)) – вызов любого метода, возвращающего void, интерфейса MyInterface
                                 ( Не поддерживает Spring );

    withincode(MyClass) — совпадает со всеми точками соединения, встречающимися в коде заданного класса
                                     ( Не поддерживает Spring );

    initialization(MyClass || MyOtherClass) – инициализация класса MyClass или MyOtherClass ( Не поддерживает Spring );

    cflow/cflowbelow(call(void MyClass.test())) – совпадает со всеми точками соединения, встречающимися в потоке
                                                  выполнения заданного среза ( Не поддерживает Spring );

    get/set(static int MyClass.x) — чтение / запись свойства x класса MyClass ( Не поддерживает Spring );

    staticinitialization(MyClass+ && !MyClass) – статическая инициализация класса, имя которого начинается на MyClass,
                                                но не сам MyClass ( Не поддерживает Spring );

    if(thisJoinPoint.getKind().equals(«call»)) – совпадает со всеми точками соединения, в которых заданное выражение
                                                 истинно ( Не поддерживает Spring );

    handler(ArrayOutOfBoundsException) – выполнение обработчика исключения ArrayOutOfBoundsException
                                        ( Не поддерживает Spring );

Ограничение

    Spring AOP - не поддерживает точки соеденение полей, для поддержки нужно использовать стороннию библиотеку(AspectJ)
    Spring AOP не позволяет навешать аспекты на аспекты


Инициализация
    Для инициализации АОП в Spring, можно исопльзовать дерективы XML или аннотации. Так же нужно позаботиться, что бы
    библеотека aspectjweaver.jar 1.6.8+ была подключенна


LTW
Load-Time Weaving используеться когда необходимо преодалеть ограничение спрингового AOP
Особенности:

    1. Теперь у нас нет одного .xml файла, куда мы красиво складываем наши pointcut-ы, aspect-ы.
    2. Нужно добавить новый aop.xml, где мы должны указать наши weaver-ы (классы которые непосредственно учувствуют в процессе), aspects-ы.
    3.Над классами аспектов появляется аннотация @Aspec + <aop:aspectj-autoproxy>
     ( если нужно сочетание Spring AOP и LTW используй <aop:include name="thisBean"/> что бы указать бины которые длжны
      использоваться как Spring AOP)
    4. Pointcut-ы тепер указываются непосредственно над aspect-ами.

        @Before( "execution(*  com.solutions. web.test.WebTestClass.testA())")
            public void testALog() {}

    6.
    4. Нужно добавить аргумент при запуске JVM/Server:

        -javaagent:${PATH_TO_LIB }/aspectjweaver.jar

В теге <weaver> следует указать все классы к которым будут применены аспекты + пакет со всеми аспектами:

        <weaver>
            <include within="foo.*"/>
        </weaver>

        <aspects>
            <aspect name="foo.ProfilingAspect"/>
        </aspects>

Если у нас есть класс (ClassA) и аспект (AspectA) которые находятся в разных пакетах,
то валидной конфигурацией будет следующий aop.xml:

   <weaver>
        <include within="com.example.ClassA"/> <!-- путь к конкретному классу -->
        <include within="com.log.* "/> <!—путь к пакету с аспектами>
    </weaver>

    <aspects>
        <aspect name="com.log.AspectA"/>
    </aspects>

Выводы:
    1.Для всех public методов верхнего уровня (EAR/APP, WEB уровень) можно использовать Spring AOP.
    2.Для всего WEB уровня не public и методов не верхнего уровня можно использовать LTW (если СTW не используется).
    3.Для всего APP уровня не public и методов не верхнего уровня можно использовать CTW (если LTW не используется).
    4.CTW и LTW не совместимые технологии.

Неободимые библиотеки:

    spring-aop.jar (version 2.5+ or later + все зависимости)
    aspectjweaver.jar (version 1.6.8+)
    spring-instrument.jar


Настройка окружения для LTW
tomcat 6+

    Томкат classloader не поддреживает LTW, поэтому Spring предостовляет расширенную версию класс лоудера
    TomcatInstrumentableClassLoader


    Копировать в CATALINA_HOME/lib org.springframework.instrument.tomcat.jar

    Прописать контекст в web application директиву изменение класс лоукда
    <Context path="/myWebApp" docBase="/my/webApp/location">
        <Loader loaderClass="org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader"/>
    </Context>

JBoss 6.x

    отключит сканирования пакетов, что бы предотвратить загрузку классов, до запуска приложежния
    Добавить файл WEB-INF/jboss-scanning.xml с текстом
        scanning xmlns="urn:jboss:scanning:1.0"/>

Standalone
    Добавить в аргумент запуска

     -javaagent:/path/to/org.springframework.instrument-{version}.jar

