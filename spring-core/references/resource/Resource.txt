Resource

Спринг предоствоялет свою более расширенную версию URL, которая поддерживает доступ к низкоуровневым рессуром,
 в classpath и в файловой системе

 Методы:

        boolean exists();                   -   возвращает булеове значение присутсвия файла
        boolean isOpen();                   -   возвращает true если поток к рессурсу открыт. Если true,
                                                InputStream не может быть прочитан несколько раз, только
                                                раз для предотвращение утечек памяти
        String getDescription();            -   Возвращает описание данное рессурсу, испрользуеться для описание
                                                ошибки, когда работаешь с рессурсом

        Остальные методы, предостовляют разные представление рессуров (URL, File, InputStream)


Реализации:

UrlResource
    Обворачивает java.net.URL, и спользуеться когда нужно получить доступ к фалам через URL, по HTTP, FTP и т.д
    Все URL имеют стандартизированное предстовление, что включает протоколы: file,http,ftp и т.д

ClassPathResource
    Класс представляет рессурс что расположен в classpath приложения. Поддерживает пресдтавление File, только для
    рессурсов файловой системы, но не для фалов расположенных в jar  и не извлеченных сервлетом или другой средой в
    файловую систему. Для адрисации подобных рессурсов используеться URL

FileSystemResource
    Рессурс представялет файл в фаловой системы. Поддерживает как File так и URL представление

ServletContextResource
    Реализация для рессурсов ServletContext, интепритирует относительный путь к корневому каталогу веб приложения
    Всегда предосовляет URL, File только в случае если веб приложение распкованно.

InputStreamResource
    Реализация InputStream, используеться только для доступных рессурсов. В инном случае предпочтителен
    ByteArrayResource или любой другой

ByteArrayResource
    Это реализация использующая массив байтов. И создает ByteArrayInputStream для массива.


ResourceLoader

    Этот интерфейс реализуют обекты что могут возвращаять/загружать рессурсы:

            public interface ResourceLoader {
                Resource getResource(String location);
            }

    Так же можно получить дуступ к рессурсу через метод getResource( location ):

        Resource template = ctx.getResource("some/resource/path/myTemplate.txt");

    В пути, не обязательно указывть специальный префикс протокола, спринг загружает рессурс исходя из контекста:

    ClassPathXmlApplicationContext: вернет ClassPathResource
    FileSystemXmlApplicationContext: вернет FileSystemResource
    FileSystemResource: вернет ServletContextResource
    и т. д.

    Указывая префикс, формируються рессурсы исходя из протокола:

    Префикс             Пример
    classpath:          classpath:com/myapp/config.xml
    file:               file:///data/config.xml
    http:               http://myserver/ logo.png
    none                /data/config.xml ( в зависимости от контекста )


ResourceLoaderAware

    Этот интерфейс специалный маркер идентифицирующий обьекты что ожидают загрузки рессурсов по конкретному загрузчику:

        public interface ResourceLoaderAware {
            void setResourceLoader(ResourceLoader resourceLoader);
        }

    Если бин реализует данный интерфейс то на момент инициализации будет вызван метод setResourceLoader и передан
    текущий загрзчик

    Либо выполнить автозазгузку @Autowiring / @Inject

Специальный префикс classpath*: указывает поиск по всем classpath, обычно в веб проложениях используеться несколько
класслоудеров и данный аттрибут указывает на поиск по всем доступным класс пасам
Для корретной работы нужно указать хотябы одну рутовую категорию перед паттерном, такой пример "classpath*:*.xml"
не будет работать

